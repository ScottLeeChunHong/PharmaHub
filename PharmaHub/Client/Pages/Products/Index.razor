@page "/products/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class=" = " card_title">Products</h3>
<br />

<a href="/products/create/" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Product
</a>
<br />
<br />

@if (Product == null)
{
    <div class="alert alert-info">Loading Products...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Expiry Date</th>
                <th>Category</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Product)
            {
                <tr>
                    <td>@product.ProductName</td>
                    <td>@product.ProductDescription</td>
                    <td>@product.ProductPrice</td>
                    <td>@product.ProductQuantity</td>
                    <td>@product.ProductExpiry</td>
                    <td>@product.Category?.CatName</td>
                    <td>
                        <a href="products/view/@product.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="products/edit/@product.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(product.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<Product>? Product;

    protected async override Task OnInitializedAsync()
    {
        Product = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
    }


    async Task Delete(int ProductID)
    {
        if (Product != null)
        {
            var product = Product.First(q => q.Id == ProductID);
            var confirm = await js.InvokeAsync<bool>("confirm", "Do you want to delete this product?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ProductsEndpoint}/{ProductID}");
                StateHasChanged();
            }
        }
    }
}