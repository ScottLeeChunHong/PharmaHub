@page "/products/create/"
@inject HttpClient _client
@inject NavigationManager _navManager
<h3 class="card-title">Create New Product</h3>
<hr />
<br />

<EditForm Model="product" OnValidSubmit="CreateProduct">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Product Name: </label>
        <div>
            <InputText @bind-Value="@product.ProductName" class="form-control" />
            <ValidationMessage For="@(() => product.ProductName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Description: </label>
        <div>
            <InputText @bind-Value="@product.ProductDescription" class="form-control" />
            <ValidationMessage For="@(() => product.ProductDescription)" />
        </div>
    </div>

    <div class="form-group">
        <label>Price: </label>
        <div>
            <InputNumber @bind-Value="@product.ProductPrice" class="form-control" />
            <ValidationMessage For="@(() => product.ProductPrice)" />
        </div>
    </div>

    <div class="form-group">
        <label>Quantity: </label>
        <div>
            <InputNumber @bind-Value="@product.ProductQuantity" class="form-control" />
            <ValidationMessage For="@(() => product.ProductQuantity)" />
        </div>
    </div>

    <div class="form-group">
        <label>Expiry: </label>
        <div>
            <InputDate @bind-Value="@product.ProductExpiry" class="form-control" />
            <ValidationMessage For="@(() => product.ProductExpiry)" />
        </div>
    </div>

    <div class="form-group">
        <label>Category: </label>
        <div>
            <InputSelect @bind-Value="@product.CategoryID" class="form-control">
                <option value=""> -- Select Category -- </option>
                @if (Categories != null)
                {
                    foreach (var category in Categories)
                    {
                        <option value="@category.Id">@category.CatName</option>
                    }
                }
            </InputSelect>

            <ValidationMessage For="@(() => product.CategoryID)" />
        </div>
    </div>



    <button type="submit" class="btn btn-success btn-block">
        Create Product
    </button>
</EditForm>

@code
{
    Product product = new Product();

    private IList<Category>? Categories;

    protected async override Task OnInitializedAsync()
    {
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
    }

    private async Task CreateProduct()
    {
        await _client.PostAsJsonAsync(Endpoints.ProductsEndpoint, product);
        _navManager.NavigateTo("/products/");
    }
}